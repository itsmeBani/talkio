import { useEffect } from "react";import { useQueryClient } from "@tanstack/react-query";import { supabase } from "@/lib/supabase.ts";export function useMessageSubscription(conversationId: string | null |undefined) {    const queryClient = useQueryClient();    useEffect(() => {        if (!conversationId) return;        // Reactions subscription        const reactionsChannel = supabase            .channel(`reactions-${conversationId}`)            .on(                "postgres_changes",                {                    event: "*",                    schema: "public",                    table: "reactions",                  },                async () => {                    await queryClient.invalidateQueries({                        queryKey: ["users_conversation", conversationId],                    });                }            )            .subscribe();        // Messages subscription        const messagesChannel = supabase            .channel(`messages-${conversationId}`)            .on(                "postgres_changes",                {                    event: "*",                    schema: "public",                    table: "messages",                    filter: `conversation_id=eq.${conversationId}`,                },                async () => {                    await queryClient.invalidateQueries({                        queryKey: ["users_conversation", conversationId],                    });                }            )            .subscribe();        return () => {            supabase.removeChannel(messagesChannel);            supabase.removeChannel(reactionsChannel);        };    }, [conversationId, queryClient]);}